# --- Stage 1: The "Builder" ---
FROM ubuntu:22.04 AS builder

# STEP 1: Set the working directory for all subsequent commands.
# This also creates the /openharmony directory.
WORKDIR /openharmony

# STEP 2: Force the system shell to be bash for better script compatibility.
RUN ln -sf /bin/bash /bin/sh

# STEP 3: Download the full source code archive.
# This large layer will be cached after the first successful download.
COPY code-v5.1.0-Release.tar.gz .

# STEP 4: Extract the source code and remove the archive to save space.
RUN tar --strip-components=1 -xzf code-v5.1.0-Release.tar.gz && rm code-v5.1.0-Release.tar.gz

# STEP 5: Change the working directory post-extraction to /openharmony/OpenHarmony folder
WORKDIR /openharmony/OpenHarmony

# STEP 6: Install the comprehensive list of all build and runtime dependencies.
# This list is designed to be exhaustive to prevent missing package errors.
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    bc \
    bison \
    build-essential \
    ccache \
    clang \
    cpio \
    curl \
    default-jdk \
    default-jdk-headless \
    dosfstools \
    flex \
    gcc-arm-none-eabi \
    genext2fs \
    git \
    git-lfs \
    gperf \
    libelf-dev \
    libffi-dev \
    libglib2.0-dev \
    liblz4-tool \
    libncurses-dev \
    libpixman-1-dev \
    libsdl2-dev \
    libssl-dev \
    libtinfo5 \
    libx11-dev \
    libxml2-dev \
    libxrandr-dev \
    make \
    mtd-utils \
    mtools \
    ninja-build \
    ovmf \
    perl \
    python3 \
    python3-pip \
    qemu-system-x86 \
    ruby \
    rsync \
    scons \
    u-boot-tools \
    unzip \
    wget \
    xsltproc \
    zlib1g-dev \
    && rm -rf /var/lib/apt/lists/*

# STEP 7: Use 'printf' to reliably create the pip config file and disable the PEP 668 error.
RUN printf "[global]\nbreak-system-packages = true\n" > /etc/pip.conf

# STEP 7B: This makes the 'hb' command available and installs its Python dependencies.
RUN python3 -m pip install --user build/hb

# STEP 7C: Add ~/.local/bin to PATH so 'hb' command can be found
ENV PATH="/root/.local/bin:${PATH}"

# STEP 8: Create compiler wrapper scripts to force-include the missing header.
RUN mkdir -p /usr/local/bin_wrappers && \
    printf '#!/bin/bash\nexec /usr/bin/gcc -include cstdint "$@"' > /usr/local/bin_wrappers/gcc && \
    printf '#!/bin/bash\nexec /usr/bin/g++ -include cstdint "$@"' > /usr/local/bin_wrappers/g++ && \
    printf '#!/bin/bash\nexec /usr/bin/clang -include cstdint "$@"' > /usr/local/bin_wrappers/clang && \
    printf '#!/bin/bash\nexec /usr/bin/clang++ -include cstdint "$@"' > /usr/local/bin_wrappers/clang++ && \
    chmod +x /usr/local/bin_wrappers/*

# STEP 9: Prepend the wrapper directory to the PATH environment variable.
# This ensures our wrappers are called instead of the real compilers.
ENV PATH="/usr/local/bin_wrappers:${PATH}"

# STEP 10: Download the pre-built compiler toolchain required by the build script.
RUN ./build/prebuilts_download.sh

# --- START FINALIZED DIAGNOSTIC BLOCK ---

# Diagnostic: Confirm working directory and contents
RUN echo "--- Current Working Directory ---" && pwd
RUN echo "--- Contents of current directory ---" && ls -la . | head -n 10

# Diagnostic: .hb marker verification
RUN echo "--- .hb marker status ---" && \
    if [ -f .hb ]; then echo ".hb marker exists"; else echo ".hb marker missing"; fi && \
    ls -la .hb 2>/dev/null || echo "No .hb file present"

# Diagnostic: hb command checks
RUN echo "--- hb --version ---" && hb --version || true
RUN echo "--- hb help ---" && hb help || true
RUN echo "--- hb set --help ---" && hb set --help || true

# Diagnostic: Source tree structure
RUN echo "--- Source tree structure (max 3 levels) ---" && \
    find . -maxdepth 3 -type d -print | sort || true

# Diagnostic: Product config inspection
RUN echo "--- Config.json contents ---" && \
    cat ./vendor/ohemu/qemu_x86_64_linux_min/config.json || \
    echo "Could not read config.json"

RUN echo "--- Extracted device_company ---" && \
    grep "device_company" ./vendor/ohemu/qemu_x86_64_linux_min/config.json || true

# Diagnostic: Global product search
RUN echo "--- All QEMU product definitions ---" && \
    find . -name "*.json" -exec grep -l "product_name" {} \; | grep -i qemu || \
    echo "No QEMU products found"

# --- END FINALIZED DIAGNOSTIC BLOCK ---

# STEP 11: Set the product configuration for the OpenHarmony build.
# Now that 'hb' is on the PATH, call it directly.
WORKDIR /openharmony/OpenHarmony
RUN touch .hb && \
    hb set -p qemu-x86_64-linux-min@ohemu

# NEW DIAGNOSTIC STEP: Verify what hb set actually stored internally
# This will show the exact product name and vendor that hb registered.
RUN echo "--- ohos_config.json contents ---" && \
    cat ./.hb/ohos_config.json || \
    echo "ERROR: .hb/ohos_config.json not found after hb set." || true

# STEP 12: Run the main build process to compile the OS, using all available CPU cores.
RUN ./build.sh --product-name qemu-x86_64-linux-min@ohemu \
    --target-cpu x86_64 \
    --gn-args='ohos_full_link_executable=true' \
    --no-prebuilt-sdk \
    --ccache -j$(nproc) \
    --ninja-args "-k 0"


# --- Stage 2: The "Runtime" ---
FROM ubuntu:22.04

# STEP 13: Copy the compiled OS images and the launch script from the builder stage.
COPY --from=builder /openharmony/out/qemu-x86_64-linux/packages/phone/images /ohos
COPY --from=builder /openharmony/device/qemu/x86_64/launch.sh /

# STEP 14: Install the minimal dependencies needed to RUN the OS.
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    qemu-system-x86 ovmf spice-client-tools && \
    rm -rf /var/lib/apt/lists/*

# STEP 15: Make the launch script executable.
RUN chmod +x /launch.sh

# STEP 16: Document that the container exposes port 5900 for the VNC/SPICE stream.
EXPOSE 5900

# STEP 17: Set the launch script as the default command when the container starts.
ENTRYPOINT ["/launch.sh"]