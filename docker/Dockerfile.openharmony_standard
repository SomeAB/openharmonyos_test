# --- Stage 1: The "Builder" ---
FROM ubuntu:22.04 AS builder

# STEP 1: Set the working directory for all subsequent commands.
# This also creates the /openharmony directory.
WORKDIR /openharmony

# STEP 2: Force the system shell to be bash for better script compatibility.
RUN ln -sf /bin/bash /bin/sh

# STEP 3: Download the full source code archive.
# This large layer will be cached after the first successful download.
COPY code-v5.1.0-Release.tar.gz .

# STEP 4: Extract the source code and remove the archive to save space.
RUN tar --strip-components=1 -xzf code-v5.1.0-Release.tar.gz && rm code-v5.1.0-Release.tar.gz

# STEP 5: Change the working directory post-extraction to /openharmony/OpenHarmony folder
WORKDIR /openharmony/OpenHarmony

# STEP 6: Install the comprehensive list of all build and runtime dependencies.
# This list is designed to be exhaustive to prevent missing package errors.
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    bc \
    bison \
    build-essential \
    ccache \
    clang \
    coreutils \
    cpio \
    curl \
    default-jdk \
    default-jdk-headless \
    dosfstools \
    flex \
    gcc-arm-none-eabi \
    genext2fs \
    git \
    git-lfs \
    gperf \
    jq \
    libelf-dev \
    libffi-dev \
    libglib2.0-dev \
    liblz4-tool \
    libncurses-dev \
    libpixman-1-dev \
    libsdl2-dev \
    libssl-dev \
    libtinfo5 \
    libx11-dev \
    libxml2-dev \
    libxrandr-dev \
    make \
    mtd-utils \
    mtools \
    ninja-build \
    ovmf \
    perl \
    python3 \
    python3-pip \
    qemu-system-x86 \
    ruby \
    rsync \
    scons \
    u-boot-tools \
    unzip \
    wget \
    xsltproc \
    zlib1g-dev \
    && rm -rf /var/lib/apt/lists/*

# STEP 7A: Use 'printf' to reliably create the pip config file and disable the PEP 668 error.
RUN printf "[global]\nbreak-system-packages = true\n" > /etc/pip.conf

# STEP 7B: Add ~/.local/bin to PATH so 'hb' command can be found
ENV PATH="/root/.local/bin:${PATH}"

# STEP 7C: This makes the 'hb' command available and installs its Python dependencies.
RUN python3 -m pip install --user build/hb

# STEP 8: Create compiler wrapper scripts to force-include the missing header.
RUN mkdir -p /usr/local/bin_wrappers && \
    printf '#!/bin/bash\nexec /usr/bin/gcc -include cstdint "$@"' > /usr/local/bin_wrappers/gcc && \
    printf '#!/bin/bash\nexec /usr/bin/g++ -include cstdint "$@"' > /usr/local/bin_wrappers/g++ && \
    printf '#!/bin/bash\nexec /usr/bin/clang -include cstdint "$@"' > /usr/local/bin_wrappers/clang && \
    printf '#!/bin/bash\nexec /usr/bin/clang++ -include cstdint "$@"' > /usr/local/bin_wrappers/clang++ && \
    chmod +x /usr/local/bin_wrappers/*

# STEP 9: Prepend the wrapper directory to the PATH environment variable.
# This ensures our wrappers are called instead of the real compilers.
ENV PATH="/usr/local/bin_wrappers:${PATH}"

# STEP 10: Download the pre-built compiler toolchain required by the build script.
RUN ./build/prebuilts_download.sh

# --- START PRUNED & ENHANCED DIAGNOSTIC BLOCK (Essential Pre-Build) ---

# Diagnostic: Confirm the current working directory.
RUN echo "--- Current Working Directory ---" && pwd || true
RUN echo "--- Contents of current directory (first few lines) ---" && ls -la . | head -n 10 || true

# Diagnostic: Show hb set help (useful syntax reminder). Helps to confirm hb is installed.
RUN echo "--- hb set --help ---" && hb set --help || true

# Diagnostic: Print the ORIGINAL content of the specific config.json file.
RUN echo "--- ORIGINAL Contents of ./vendor/ohemu/qemu_x86_64_linux_min/config.json ---" && \
    cat ./vendor/ohemu/qemu_x86_64_linux_min/config.json || true

# Diagnostic: Extract the 'device_company' from ORIGINAL config.json
RUN echo "--- Extracted 'device_company' from ORIGINAL config.json ---" && \
    grep "device_company" ./vendor/ohemu/qemu_x86_64_linux_min/config.json || true

# Diagnostic: Search all JSON files for 'product_name' mentioning 'qemu'
RUN echo "--- Searching for all QEMU product JSON definitions ---" && \
    find . -name "*.json" -exec grep -l "product_name" {} \; | grep -i qemu || \
    echo "No QEMU product JSONs with 'product_name' found." || true

# Diagnostic: Print the ORIGINAL content of ohos.build file
RUN echo "--- ORIGINAL Contents of /device/qemu/x86_64_virt/linux/ohos.build ---" && \
    cat /openharmony/OpenHarmony/device/qemu/x86_64_virt/linux/ohos.build || echo "ohos.build not found"

# --- END PRUNED & ENHANCED DIAGNOSTIC BLOCK ---

# STEP 11: Set the product configuration for the OpenHarmony build.
# Now that 'hb' is on the PATH, call it directly. Removed the 'touch .hb' from here, as it was causing conflict with folder creation
WORKDIR /openharmony/OpenHarmony
RUN hb set -p qemu-x86_64-linux-min@ohemu

# Diagnostic: Check the environment hb is using to find the root path and other variables.
RUN echo "--- hb environment details ---" && \
    hb env || true

# STEP 12: First stage of build.sh to generate preloader artifacts (including whitelist).
# Use --build-only-load to stop after PRELOAD phase.
RUN echo "=== STAGE 1: Running build to generate whitelist ===" && \
    timeout 360 ./build.sh --product-name qemu-x86_64-linux-min@ohemu \
    --target-cpu x86_64 \
    --no-prebuilt-sdk \
    --ccache -j$(nproc) \
    --ninja-args "-k 0" \
    --log-level=debug \
    --build-only-load || true


# NEW DIAGNOSTIC: Output the contents of compile_standard_whitelist.json (after generation)
RUN echo "=== compile_standard_whitelist.json ORIGINAL CONTENTS ===" && \
    cat /openharmony/OpenHarmony/out/preloader/qemu-x86_64-linux-min/compile_standard_whitelist.json || true

# DIAGNOSTIC: Show the generated preloader artifacts directory
RUN echo "=== Preloader Artifacts List ===" && \
    ls -lR out/preloader/qemu-x86_64-linux-min || true

# DIAGNOSTIC: Show the contents of the generated parts.json
RUN echo "=== parts.json CONTENTS ===" && \
    cat out/preloader/qemu-x86_64-linux-min/parts.json || true

# STEP 13: Resume the build process.
# Use --fast-rebuild to skip preloader steps and resume correctly. Removed that flag for now, as it was skipping important steps.
RUN ./build.sh --product-name qemu-x86_64-linux-min@ohemu \
    --target-cpu x86_64 \
    --no-prebuilt-sdk \
    --ccache -j$(nproc) \
    --ninja-args "-k 0" \
    --log-level=debug \
    || { echo "===== BUILD FAILED - DUMPING CRITICAL STATE ====="; \
         cat /openharmony/OpenHarmony/device/qemu/x86_64_virt/linux/ohos.build || echo "ohos.build not found"; \
         cat /openharmony/OpenHarmony/vendor/ohemu/qemu_x86_64_linux_min/config.json || echo "config.json not found"; \
         ls -lR /openharmony/OpenHarmony/out/preloader/ || echo "Preloader dir not found"; \
         cat /openharmony/OpenHarmony/out/preloader/qemu-x86_64-linux-min/parts.json || echo "parts.json not found"; \
         cat /openharmony/OpenHarmony/out/preloader/qemu-x86_64-linux-min/compile_standard_whitelist.json || echo "whitelist.json not found"; \
         exit 1; }


# --- Stage 2: The "Runtime" ---
FROM ubuntu:22.04

# STEP 13: Copy the compiled OS images and the launch script from the builder stage.
COPY --from=builder /openharmony/out/qemu-x86_64-linux/packages/phone/images /ohos
COPY --from=builder /openharmony/device/qemu/x86_64/launch.sh /

# STEP 14: Install the minimal dependencies needed to RUN the OS.
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    qemu-system-x86 ovmf spice-client-tools && \
    rm -rf /var/lib/apt/lists/*

# STEP 15: Make the launch script executable.
RUN chmod +x /launch.sh

# STEP 16: Document that the container exposes port 5900 for the VNC/SPICE stream.
EXPOSE 5900

# STEP 17: Set the launch script as the default command when the container starts.
ENTRYPOINT ["/launch.sh"]