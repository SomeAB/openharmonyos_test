# --- Stage 1: The "Builder" ---
FROM ubuntu:22.04 AS builder

# STEP 1: Set the working directory for all subsequent commands.
# This also creates the /openharmony directory.
WORKDIR /openharmony

# STEP 2: Force the system shell to be bash for better script compatibility.
RUN ln -sf /bin/bash /bin/sh

# STEP 3: Download the full source code archive.
# This large layer will be cached after the first successful download.
COPY code-v5.1.0-Release.tar.gz .

# STEP 4: Extract the source code and remove the archive to save space.
RUN tar --strip-components=1 -xzf code-v5.1.0-Release.tar.gz && rm code-v5.1.0-Release.tar.gz

# STEP 5: Change the working directory post-extraction to /openharmony/OpenHarmony folder
WORKDIR /openharmony/OpenHarmony

# STEP 6: Install the comprehensive list of all build and runtime dependencies.
# This list is designed to be exhaustive to prevent missing package errors.
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    bc \
    bison \
    build-essential \
    cargo \
    ccache \
    clang \
    coreutils \
    cpio \
    curl \
    default-jdk \
    default-jdk-headless \
    dosfstools \
    flex \
    gcc-arm-none-eabi \
    genext2fs \
    git \
    git-lfs \
    gperf \
    jq \
    libelf-dev \
    libffi-dev \
    libglib2.0-dev \
    liblz4-tool \
    libncurses-dev \
    libpixman-1-dev \
    libsdl2-dev \
    libssl-dev \
    libtinfo5 \
    libx11-dev \
    libxml2-dev \
    libxrandr-dev \
    make \
    mtd-utils \
    mtools \
    ninja-build \
    ovmf \
    perl \
    python3 \
    python3-pip \
    qemu-system-x86 \
    ruby \
    rustc \
    rsync \
    scons \
    u-boot-tools \
    unzip \
    wget \
    xsltproc \
    zlib1g-dev \
    && rm -rf /var/lib/apt/lists/*

# STEP 6B: Create a symbolic link so 'python' command points to 'python3'
RUN ln -sf /usr/bin/python3 /usr/bin/python

# STEP 7A: Use 'printf' to reliably create the pip config file and disable the PEP 668 error.
RUN printf "[global]\nbreak-system-packages = true\n" > /etc/pip.conf

# STEP 7B: Add ~/.local/bin to PATH so 'hb' command can be found
ENV PATH="/root/.local/bin:${PATH}"

# STEP 7C: This makes the 'hb' command available and installs its Python dependencies.
RUN python3 -m pip install --user build/hb

# STEP 8: Create compiler wrapper scripts to force-include the missing header.
RUN mkdir -p /usr/local/bin_wrappers && \
    printf '#!/bin/bash\nexec /usr/bin/gcc -include cstdint "$@"' > /usr/local/bin_wrappers/gcc && \
    printf '#!/bin/bash\nexec /usr/bin/g++ -include cstdint "$@"' > /usr/local/bin_wrappers/g++ && \
    printf '#!/bin/bash\nexec /usr/bin/clang -include cstdint "$@"' > /usr/local/bin_wrappers/clang && \
    printf '#!/bin/bash\nexec /usr/bin/clang++ -include cstdint "$@"' > /usr/local/bin_wrappers/clang++ && \
    chmod +x /usr/local/bin_wrappers/*

# STEP 9: Prepend the wrapper directory to the PATH environment variable.
# This ensures our wrappers are called instead of the real compilers.
ENV PATH="/usr/local/bin_wrappers:${PATH}"

# STEP 10: Download the pre-built compiler toolchain required by the build script.
RUN ./build/prebuilts_download.sh

# Diagnostic: Find and show the original content of the source whitelist template.
RUN echo "--- SOURCE whitelist BEFORE patch ---" && \
    find build/ -name compile_standard_whitelist.json -print0 | xargs -0 cat || echo "Source whitelist not found."

# ===================================================================
# Fix for ffrt dependency issue
# ===================================================================

# 1. Create or update ffrt ohos.build file
RUN if [ ! -f foundation/ability/ffrt/ohos.build ]; then \
    echo "=== Creating missing ohos.build for ffrt ===" && \
    mkdir -p foundation/ability/ffrt && \
    printf '{\n  "subsystem": "ability",\n  "parts": {\n    "ffrt": {\n      "module_list": [\n        "//foundation/ability/ffrt:libffrt"\n      ]\n    }\n  }\n}' > foundation/ability/ffrt/ohos.build; \
else \
    echo "=== Updating existing ffrt ohos.build ===" && \
    # Ensure correct subsystem in existing file
    sed -i 's/"subsystem": *"[^"]*"/"subsystem": "ability"/' foundation/ability/ffrt/ohos.build; \
fi

# 2. Add ffrt component to ability subsystem only if not already present
RUN echo "=== Adding ffrt to ability subsystem ===" && \
    if ! jq -e '.subsystems[] | select(.subsystem=="ability").components[] | select(.component=="ffrt")' vendor/ohemu/qemu_x86_64_linux_min/config.json >/dev/null; then \
        jq '(.subsystems[] | select(.subsystem == "ability").components) += [{"component": "ffrt", "features":[]}]' \
        vendor/ohemu/qemu_x86_64_linux_min/config.json > tmp.json && \
        mv tmp.json vendor/ohemu/qemu_x86_64_linux_min/config.json; \
    else \
        echo "ffrt component already exists in ability subsystem"; \
    fi

# 3. Comprehensive whitelist patch
RUN echo "=== Applying whitelist patches ===" && \
    find build/ -name compile_standard_whitelist.json -print0 | xargs -0 sed -i \
    -e '/"bundle_subsystem_error": \[/a \    "device\/qemu\/x86_64_virt\/linux\/ohos.build",\n    "foundation\/ability\/ffrt\/ohos.build",' \
    -e 's/"subsystem_components": \[\],/"subsystem_components": [\n        "device_qemu-x86_64-linux",\n        "device_x86_64_virt",\n        "product_qemu-x86_64-linux-min"\n    ],/' \
    -e '/"deps_added_external_part_module": \[/a \    "//foundation\/ability\/ffrt:libffrt",'


# ===================================================================
# Fix for ylong_runtime dependency issue
# ===================================================================

# 1. Create or update the ohos.build file for ylong_runtime
RUN if [ ! -f third_party/ylong_runtime/ohos.build ]; then \
    echo "=== Creating missing ohos.build for ylong_runtime ===" && \
    mkdir -p third_party/ylong_runtime && \
    printf '{\n  "subsystem": "commonlibrary",\n  "parts": {\n    "ylong_runtime": {\n      "module_list": [\n        "//third_party/ylong_runtime:ylong_runtime_rust"\n      ]\n    }\n  }\n}' > third_party/ylong_runtime/ohos.build; \
else \
    echo "=== Updating existing ylong_runtime ohos.build ===" && \
    sed -i 's/"subsystem": *"[^"]*"/"subsystem": "commonlibrary"/' third_party/ylong_runtime/ohos.build; \
fi

# 2. Add ylong_runtime component to the commonlibrary subsystem
RUN echo "=== Adding ylong_runtime to commonlibrary subsystem ===" && \
    if ! jq -e '.subsystems[] | select(.subsystem=="commonlibrary").components[] | select(.component=="ylong_runtime")' vendor/ohemu/qemu_x86_64_linux_min/config.json >/dev/null; then \
        jq '(.subsystems[] | select(.subsystem == "commonlibrary").components) += [{"component": "ylong_runtime", "features":[]}]' \
        vendor/ohemu/qemu_x86_64_linux_min/config.json > tmp.json && \
        mv tmp.json vendor/ohemu/qemu_x86_64_linux_min/config.json; \
    else \
        echo "ylong_runtime component already exists in commonlibrary subsystem"; \
    fi

# 3. Apply whitelist patches for ylong_runtime
RUN echo "=== Applying ylong_runtime whitelist patches ===" && \
    find build/ -name compile_standard_whitelist.json -print0 | xargs -0 sed -i \
    -e '/"bundle_subsystem_error": \[/a \    "third_party\/ylong_runtime\/ohos.build",' \
    -e '/"deps_added_external_part_module": \[/a \    "//third_party\/ylong_runtime:ylong_runtime_rust",'

# Diagnostic: Find and show the patched content of the source whitelist template.
RUN echo "--- SOURCE whitelist AFTER patch ---" && \
    find build/ -name compile_standard_whitelist.json -print0 | xargs -0 cat || echo "Source whitelist file not found after patch."

# --- START DIAGNOSTIC BLOCK (Essential Pre-Build) ---

# Diagnostic: Confirm the current working directory.
RUN echo "--- Current Working Directory ---" && pwd || true
RUN echo "--- Contents of current directory (first few lines) ---" && ls -la . | head -n 10 || true

# Diagnostic: Show hb set help (useful syntax reminder). Helps to confirm hb is installed.
RUN echo "--- hb set --help ---" && hb set --help || true

# Diagnostic: Show hb build help (useful syntax reminder). Helps to confirm hb is installed.
RUN echo "--- hb build --help ---" && hb build --help || true

# Diagnostic: Print the content of both ohos.build files
RUN echo "--- Contents of ohos.build files ---" && \
    echo "device/qemu/x86_64_virt/linux/ohos.build:" && \
    cat device/qemu/x86_64_virt/linux/ohos.build && \
    echo "\ndevice/qemu/x86_64_virt/ohos.build:" && \
    cat device/qemu/x86_64_virt/ohos.build

RUN echo "--- UPDATED Contents of config.json ---" && \
    cat vendor/ohemu/qemu_x86_64_linux_min/config.json

# --- END DIAGNOSTIC BLOCK ---

# STEP 11: Set the product configuration for the OpenHarmony build.
# Now that 'hb' is on the PATH, call it directly. Removed the 'touch .hb' from here, as it was causing conflict with folder creation
WORKDIR /openharmony/OpenHarmony
RUN hb set --product-name qemu-x86_64-linux-min@ohemu

# Diagnostic: Check the environment hb is using to find the root path and other variables.
RUN echo "--- hb environment details ---" && \
    hb env || true


# STEP 12: Build using the accompanying 'hb build' command
RUN echo "=== Running hb build to build the OpenHarmony OS ===" && \
    hb build --product-name qemu-x86_64-linux-min@ohemu \
    --target-cpu x86_64 \
    --verbose \
    --log-level debug

# Diagnostic: List all final build artifacts in the main output directory.
RUN echo "--- Listing All Final Build Artifacts in the 'out' directory ---" && \
    ls -lR out/ || true

# --- Stage 2: The "Runtime" ---
FROM ubuntu:22.04

# STEP 13: Copy the compiled OS images and the launch script from the builder stage.
COPY --from=builder /openharmony/out/qemu-x86_64-linux/packages/phone/images /ohos
COPY --from=builder /openharmony/device/qemu/x86_64/launch.sh /

# STEP 14: Install the minimal dependencies needed to RUN the OS.
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    qemu-system-x86 ovmf spice-client-tools && \
    rm -rf /var/lib/apt/lists/*

# STEP 15: Make the launch script executable.
RUN chmod +x /launch.sh

# STEP 16: Document that the container exposes port 5900 for the VNC/SPICE stream.
EXPOSE 5900

# STEP 17: Set the launch script as the default command when the container starts.
ENTRYPOINT ["/launch.sh"]