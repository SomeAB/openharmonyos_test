# --- Stage 1: The "Builder" ---
FROM ubuntu:22.04 AS builder

# STEP 1: Set the working directory for all subsequent commands.
# This also creates the /openharmony directory.
WORKDIR /openharmony

# STEP 2: Force the system shell to be bash for better script compatibility.
RUN ln -sf /bin/bash /bin/sh

# STEP 3: Download the full source code archive.
# This large layer will be cached after the first successful download.
COPY code-v5.1.0-Release.tar.gz .

# STEP 4: Extract the source code and remove the archive to save space.
RUN tar --strip-components=1 -xzf code-v5.1.0-Release.tar.gz && rm code-v5.1.0-Release.tar.gz

# STEP 5: Change the working directory post-extraction to /openharmony/OpenHarmony folder
WORKDIR /openharmony/OpenHarmony

# STEP 6: Install the comprehensive list of all build and runtime dependencies.
# This list is designed to be exhaustive to prevent missing package errors.
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    bc \
    bison \
    build-essential \
    ccache \
    clang \
    cpio \
    curl \
    default-jdk \
    default-jdk-headless \
    dosfstools \
    flex \
    gcc-arm-none-eabi \
    genext2fs \
    git \
    git-lfs \
    gperf \
    jq \
    libelf-dev \
    libffi-dev \
    libglib2.0-dev \
    liblz4-tool \
    libncurses-dev \
    libpixman-1-dev \
    libsdl2-dev \
    libssl-dev \
    libtinfo5 \
    libx11-dev \
    libxml2-dev \
    libxrandr-dev \
    make \
    mtd-utils \
    mtools \
    ninja-build \
    ovmf \
    perl \
    python3 \
    python3-pip \
    qemu-system-x86 \
    ruby \
    rsync \
    scons \
    u-boot-tools \
    unzip \
    wget \
    xsltproc \
    zlib1g-dev \
    && rm -rf /var/lib/apt/lists/*

# STEP 7: Use 'printf' to reliably create the pip config file and disable the PEP 668 error.
RUN printf "[global]\nbreak-system-packages = true\n" > /etc/pip.conf

# STEP 7B: This makes the 'hb' command available and installs its Python dependencies.
RUN python3 -m pip install --user build/hb

# STEP 7C: Add ~/.local/bin to PATH so 'hb' command can be found
ENV PATH="/root/.local/bin:${PATH}"

# STEP 8: Create compiler wrapper scripts to force-include the missing header.
RUN mkdir -p /usr/local/bin_wrappers && \
    printf '#!/bin/bash\nexec /usr/bin/gcc -include cstdint "$@"' > /usr/local/bin_wrappers/gcc && \
    printf '#!/bin/bash\nexec /usr/bin/g++ -include cstdint "$@"' > /usr/local/bin_wrappers/g++ && \
    printf '#!/bin/bash\nexec /usr/bin/clang -include cstdint "$@"' > /usr/local/bin_wrappers/clang && \
    printf '#!/bin/bash\nexec /usr/bin/clang++ -include cstdint "$@"' > /usr/local/bin_wrappers/clang++ && \
    chmod +x /usr/local/bin_wrappers/*

# STEP 9: Prepend the wrapper directory to the PATH environment variable.
# This ensures our wrappers are called instead of the real compilers.
ENV PATH="/usr/local/bin_wrappers:${PATH}"

# STEP 10: Download the pre-built compiler toolchain required by the build script.
RUN ./build/prebuilts_download.sh

# --- START PRUNED & ENHANCED DIAGNOSTIC BLOCK (Essential Pre-Build) ---

# Diagnostic: Verify jq exists before using it (from Deepseek)
RUN echo "--- jq version ---" && jq --version || echo "jq not found"

# Diagnostic: Confirm the current working directory.
RUN echo "--- Current Working Directory ---" && pwd || true
RUN echo "--- Contents of current directory (first few lines) ---" && ls -la . | head -n 10 || true

# Diagnostic: Show hb set help (useful syntax reminder).
RUN echo "--- hb set --help ---" && hb set --help || true

# Diagnostic: Print the ORIGINAL content of the specific config.json file.
RUN echo "--- ORIGINAL Contents of ./vendor/ohemu/qemu_x86_64_linux_min/config.json ---" && \
    cat ./vendor/ohemu/qemu_x86_64_linux_min/config.json || true

# Diagnostic: Extract the 'device_company' from ORIGINAL config.json
RUN echo "--- Extracted 'device_company' from ORIGINAL config.json ---" && \
    grep "device_company" ./vendor/ohemu/qemu_x86_64_linux_min/config.json || true

# Diagnostic: Search all JSON files for 'product_name' mentioning 'qemu'
RUN echo "--- Searching for all QEMU product JSON definitions ---" && \
    find . -name "*.json" -exec grep -l "product_name" {} \; | grep -i qemu || \
    echo "No QEMU product JSONs with 'product_name' found." || true

# --- END PRUNED & ENHANCED DIAGNOSTIC BLOCK ---

# STEP 11: Set the product configuration for the OpenHarmony build.
# Now that 'hb' is on the PATH, call it directly.
WORKDIR /openharmony/OpenHarmony
RUN touch .hb && \
    hb set -p qemu-x86_64-linux-min@ohemu

# First sed patch (already in place): Patch config.json to align subsystem name
RUN sed -i 's/"subsystem": "device_x86_64_virt"/"subsystem": "device_qemu-x86_64-linux"/g' \
    ./vendor/ohemu/qemu_x86_64_linux_min/config.json

# NEW SED PATCH (Crucial for component finding): Patch config.json for the COMPONENT name
# This changes "component": "qemu_x86_64_linux_chipset" to "component": "device_qemu-x86_64-linux" in config.json.
RUN sed -i 's/"component": "qemu_x86_64_linux_chipset"/"component": "device_qemu-x86_64-linux"/g' \
    ./vendor/ohemu/qemu_x86_64_linux_min/config.json

# Keep the existing sed patch for ohos.build
# This resolves the conflict in the file explicitly named by the error message (for ohos.build's subsystem name).
RUN sed -i 's/device_x86_64_virt/device_qemu-x86_64-linux/g' /openharmony/OpenHarmony/device/qemu/x86_64_virt/linux/ohos.build

# --- Post-Configuration Diagnostics ---
# Diagnostic: Verify the ohos.build file after its patch.
RUN echo "--- Verifying ohos.build patch (subsystem line) ---" && \
    grep -A 1 '"subsystem"' /openharmony/OpenHarmony/device/qemu/x86_64_virt/linux/ohos.build || true

# Diagnostic: Verify hb configuration (useful for general success confirmation)
RUN echo "--- ohos_config.json contents ---" && \
    { [ -f ./.hb/ohos_config.json ] && cat ./.hb/ohos_config.json || \
    echo "ERROR: .hb/ohos_config.json missing"; }

# Diagnostic: Verify config.json after its patches (subsystem & component)
RUN echo "--- Verifying config.json patch (subsystem & component lines) ---" && \
    grep -A 5 '"subsystem": "device_qemu-x86_64-linux"' ./vendor/ohemu/qemu_x86_64_linux_min/config.json || true

# NEW Diagnostic: Explicitly verify the component name change in config.json
# This confirms that "component": "device_qemu-x86_64-linux" is present in the file.
RUN echo "--- Verifying config.json component name patch ---" && \
    grep '"component": "device_qemu-x86_64-linux"' ./vendor/ohemu/qemu_x86_64_linux_min/config.json || \
    echo "Component name 'device_qemu-x86_64-linux' not found in config.json after patch!" || true

# --- END Post-Configuration Diagnostics ---

# STEP 12: Run the main build process to compile the OS, using all available CPU cores.
RUN ./build.sh --product-name qemu-x86_64-linux-min@ohemu \
    --target-cpu x86_64 \
    --gn-args='ohos_full_link_executable=true' \
    --no-prebuilt-sdk \
    --ccache -j$(nproc) \
    --ninja-args "-k 0"


# --- Stage 2: The "Runtime" ---
FROM ubuntu:22.04

# STEP 13: Copy the compiled OS images and the launch script from the builder stage.
COPY --from=builder /openharmony/out/qemu-x86_64-linux/packages/phone/images /ohos
COPY --from=builder /openharmony/device/qemu/x86_64/launch.sh /

# STEP 14: Install the minimal dependencies needed to RUN the OS.
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    qemu-system-x86 ovmf spice-client-tools && \
    rm -rf /var/lib/apt/lists/*

# STEP 15: Make the launch script executable.
RUN chmod +x /launch.sh

# STEP 16: Document that the container exposes port 5900 for the VNC/SPICE stream.
EXPOSE 5900

# STEP 17: Set the launch script as the default command when the container starts.
ENTRYPOINT ["/launch.sh"]